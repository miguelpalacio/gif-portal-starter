{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","useEffect","onLoad","a","checkIfWalletIsConnected","window","addEventListener","removeEventListener","console","log","getGifList","solana","isPhantom","connect","onlyIfTrusted","response","wAddress","publicKey","toString","alert","error","connectWallet","onInputChange","useCallback","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","account","fetch","sendGif","length","addGif","renderNotConnectedContainer","className","onClick","renderConnectedContainer","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6407cf7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useCallback, useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport kp from './keypair.json';\n\n// -------------------------------------\n// Constants\n// -------------------------------------\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\n// let baseAccount = Keypair.generate();\t// BUG: this will asks us to create a base account on every refresh\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n\tpreflightCommitment: 'processed',\n};\n\nconst TWITTER_HANDLE = 'miguelpalacio';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// const TEST_GIFS = [\n// \t'https://media.giphy.com/media/8DTnuPhxv0m4w/giphy.gif',\n// \t'https://media.giphy.com/media/YrHFILYNmk2wByofdX/giphy.gif',\n// \t'https://media.giphy.com/media/3ohhwuxFOPqA2rjYpG/giphy.gif',\n// \t'https://media.giphy.com/media/LTafJjGLZieXu/giphy-downsized-large.gif',\n// \t'https://media.giphy.com/media/VXJWhaO7afRe/giphy.gif',\n// \t'https://media.giphy.com/media/nbB1CV1fazlGo/giphy.gif',\n// \t'https://media.giphy.com/media/3o6Ztbi66nkovK0ACY/giphy.gif',\n// ];\n\n// -------------------------------------\n// Component\n// -------------------------------------\n\nconst App = () => {\n\tconst [walletAddress, setWalletAddress] = useState(null);\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [gifList, setGifList] = useState([]);\n\n\t// ---------------------------------\n\t// React lifecycle\n\t// ---------------------------------\n\n\t/*\n\t * When our component first mounts, let's check to see if we have a connected\n\t * Phantom Wallet\n\t */\n\tuseEffect(() => {\n\t\tconst onLoad = async () => {\n\t\t\tawait checkIfWalletIsConnected();\n\t\t};\n\t\twindow.addEventListener('load', onLoad);\n\t\treturn () => window.removeEventListener('load', onLoad);\n\t}, []);\n\n\t/**\n\t *\n\t */\n\tuseEffect(() => {\n\t\tif (walletAddress) {\n\t\t\tconsole.log('Fetching GIF list...');\n\t\t\tgetGifList();\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [walletAddress]);\n\n\t// ---------------------------------\n\t// Methods\n\t// ---------------------------------\n\n\t/*\n\t * This function holds the logic for deciding if a Phantom Wallet is\n\t * connected or not\n\t */\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { solana } = window;\n\n\t\t\tif (solana) {\n\t\t\t\tif (solana.isPhantom) {\n\t\t\t\t\tconsole.log('Phantom wallet found!');\n\n\t\t\t\t\t/*\n\t\t\t\t\t * The solana object gives us a function that will allow us to connect\n\t\t\t\t\t * directly with the user's wallet!\n\t\t\t\t\t */\n\t\t\t\t\tconst response = await solana.connect({ onlyIfTrusted: true });\n\t\t\t\t\tconst wAddress = response.publicKey.toString();\n\t\t\t\t\tconsole.log('Connected with Public Key:', wAddress);\n\n\t\t\t\t\tsetWalletAddress(wAddress);\n\t\t\t\t}\n\t\t\t} else alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\t/*\n\t * Let's define this method so our code doesn't break.\n\t * We will write the logic for this next!\n\t */\n\tconst connectWallet = async () => {\n\t\tconst { solana } = window;\n\n\t\tif (solana) {\n\t\t\tconst response = await solana.connect();\n\t\t\tconst wAddress = response.publicKey.toString();\n\t\t\tconsole.log('Connected with Public Key:', wAddress);\n\n\t\t\tsetWalletAddress(wAddress);\n\t\t}\n\t};\n\n\t/**\n\t *\n\t */\n\tconst onInputChange = useCallback((event) => {\n\t\tconst { value } = event.target;\n\t\tsetInputValue(value);\n\t}, []);\n\n\t/**\n\t *\n\t */\n\tconst getProvider = () => {\n\t\tconst connection = new Connection(network, opts.preflightCommitment);\n\t\treturn new Provider(connection, window.solana, opts.preflightCommitment);\n\t};\n\n\t/**\n\t *\n\t */\n\tconst createGifAccount = async () => {\n\t\ttry {\n\t\t\tconst provider = getProvider();\n\t\t\tconst program = new Program(idl, programID, provider);\n\n\t\t\tconsole.log('ping');\n\n\t\t\tawait program.rpc.startStuffOff({\n\t\t\t\taccounts: {\n\t\t\t\t\tbaseAccount: baseAccount.publicKey,\n\t\t\t\t\tuser: provider.wallet.publicKey,\n\t\t\t\t\tsystemProgram: SystemProgram.programId,\n\t\t\t\t},\n\t\t\t\tsigners: [baseAccount],\n\t\t\t});\n\n\t\t\tconsole.log('Created a new BaseAccount w/ address:', baseAccount.publicKey.toString());\n\t\t\tawait getGifList();\n\t\t} catch (error) {\n\t\t\tconsole.log('Error creating BaseAccount account:', error);\n\t\t}\n\t};\n\n\t/**\n\t *\n\t */\n\tconst getGifList = async () => {\n\t\ttry {\n\t\t\tconst provider = getProvider();\n\t\t\tconst program = new Program(idl, programID, provider);\n\t\t\tconst account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n\t\t\tconsole.log('Got the account', account);\n\t\t\tsetGifList(account.gifList);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error in getGifList', error);\n\t\t\tsetGifList(null);\n\t\t}\n\t};\n\n\t/**\n\t *\n\t */\n\tconst sendGif = useCallback(async () => {\n\t\tif (inputValue.length === 0) {\n\t\t\tconsole.log('No gif link given!');\n\t\t\treturn;\n\t\t}\n\t\tsetInputValue('');\n\t\tconsole.log('Gif link:', inputValue);\n\t\ttry {\n\t\t\tconst provider = getProvider();\n\t\t\tconst program = new Program(idl, programID, provider);\n\n\t\t\tawait program.rpc.addGif(inputValue, {\n\t\t\t\taccounts: {\n\t\t\t\t\tbaseAccount: baseAccount.publicKey,\n\t\t\t\t\tuser: provider.wallet.publicKey,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log('GIF successfully sent to program', inputValue);\n\n\t\t\tawait getGifList();\n\t\t} catch (error) {\n\t\t\tconsole.log('Error sending GIF:', error);\n\t\t}\n\t}, [inputValue, gifList]);\n\n\t/*\n\t * We want to render this UI when the user hasn't connected\n\t * their wallet to our app yet.\n\t */\n\tconst renderNotConnectedContainer = useCallback(\n\t\t() => (\n\t\t\t<button className='cta-button connect-wallet-button' onClick={connectWallet}>\n\t\t\t\tConnect to Wallet\n\t\t\t</button>\n\t\t),\n\t\t[]\n\t);\n\n\t/**\n\t *\n\t */\n\t// const renderConnectedContainer = useCallback(\n\t// \t() => (\n\t// \t\t<div className='connected-container'>\n\t// \t\t\t<form\n\t// \t\t\t\tonSubmit={(event) => {\n\t// \t\t\t\t\tevent.preventDefault();\n\t// \t\t\t\t\tsendGif();\n\t// \t\t\t\t}}\n\t// \t\t\t>\n\t// \t\t\t\t<input type='text' placeholder='Enter gif link!' value={inputValue} onChange={onInputChange} />\n\t// \t\t\t\t<button type='submit' className='cta-button submit-gif-button'>\n\t// \t\t\t\t\tSubmit\n\t// \t\t\t\t</button>\n\t// \t\t\t</form>\n\t// \t\t\t<div className='gif-grid'>\n\t// \t\t\t\t{gifList.map((gif) => (\n\t// \t\t\t\t\t<div className='gif-item' key={gif}>\n\t// \t\t\t\t\t\t<img src={gif} alt={gif} />\n\t// \t\t\t\t\t</div>\n\t// \t\t\t\t))}\n\t// \t\t\t</div>\n\t// \t\t</div>\n\t// \t),\n\t// \t[inputValue, onInputChange, sendGif, gifList]\n\t// );\n\n\t/**\n\t *\n\t */\n\tconst renderConnectedContainer = useCallback(() => {\n\t\t// If we hit this, it means the program account hasn't been initialized.\n\t\tif (gifList === null) {\n\t\t\treturn (\n\t\t\t\t<div className='connected-container'>\n\t\t\t\t\t<button className='cta-button submit-gif-button' onClick={createGifAccount}>\n\t\t\t\t\t\tDo One-Time Initialization For GIF Program Account\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t// Otherwise, we're good! Account exists. User can submit GIFs.\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className='connected-container'>\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tsendGif();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<input type='text' placeholder='Enter gif link!' value={inputValue} onChange={onInputChange} />\n\t\t\t\t\t\t<button type='submit' className='cta-button submit-gif-button'>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t\t<div className='gif-grid'>\n\t\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n\t\t\t\t\t\t{gifList.map((item, index) => (\n\t\t\t\t\t\t\t<div className='gif-item' key={index}>\n\t\t\t\t\t\t\t\t<img src={item.gifLink} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}, [inputValue, onInputChange, sendGif, gifList]);\n\n\t// ---------------------------------\n\t// View\n\t// ---------------------------------\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n\t\t\t\t<div className='header-container'>\n\t\t\t\t\t<p className='header'>ðŸ–¼ Action GIFs Portal</p>\n\t\t\t\t\t<p className='sub-text'>View your action GIF collection in the metaverse âœ¨</p>\n\t\t\t\t\t{!walletAddress && renderNotConnectedContainer()}\n\t\t\t\t\t{walletAddress && renderConnectedContainer()}\n\t\t\t\t</div>\n\t\t\t\t<div className='footer-container'>\n\t\t\t\t\t<img alt='Twitter Logo' className='twitter-logo' src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName='footer-text'\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\trel='noreferrer'\n\t\t\t\t\t>{`built by @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}